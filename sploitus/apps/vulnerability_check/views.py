from django.shortcuts import render
from rest_framework import generics
from .models import *
from .serializers import *
from rest_framework.response import Response
from rest_framework import status
from .serializers import VulnDataSerializer
from rest_framework.views import APIView
from datetime import datetime
#from .tasks import parse_resource_task
from rest_framework.decorators import api_view
from . import tasks
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi


class CheckCreateApiView(generics.CreateAPIView):
    serializer_class = VulnDataSerializer

    @swagger_auto_schema(
        operation_description="Создание новой записи о проверке уязвимости.",
        request_body=VulnDataSerializer,
        responses={
            201: openapi.Response(
                description="Успешное создание",
                schema=VulnDataSerializer
            ),
            400: openapi.Response(
                description="Ошибка валидации данных",
            )
        },
    )

    def create_check(self, request):
        serializer = self.serializer_class(data=request.data)

        if serializer.is_valid:
            serializer.save()

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

@swagger_auto_schema(
    method='post',
    operation_description="Запуск задачи на парсинг по переданному запросу.",
    request_body=openapi.Schema(
        type=openapi.TYPE_OBJECT,
        properties={
            'query': openapi.Schema(
                type=openapi.TYPE_STRING,
                description="Запрос для парсинга (домен или IP-адрес)."
            )
        },
        required=['query']
    ),
    responses={
        200: openapi.Response(
            description="Задача успешно запущена.",
            examples={
                "application/json": {
                    "status": "in progress"
                }
            }
        ),
        500: openapi.Response(
            description="Ошибка выполнения.",
            examples={
                "application/json": {
                    "status": "error"
                }
            }
        )
    }
)
@api_view(['POST'])
def index(request):
    query = request.data.get("query")
    try:
        tasks.parse_query_task.delay(query)

        # results = sploitus_parser.parse(query)
        # print("RRRRRRESS: ", results)

        return Response({
            "status": 'in progress',
        })
    except Exception as e:
        return Response({
            "status": 'error',
        }, status=500)
    

# class FrequencyParserApiView(APIView):
#     def 